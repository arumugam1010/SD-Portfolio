// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(cuid())
  name             String    @db.VarChar(50)
  email            String    @unique @db.VarChar(100)
  password         String    @db.VarChar(255)
  role             UserRole  @default(USER)
  avatar           String?   @db.VarChar(255)
  isActive         Boolean   @default(true)
  lastLogin        DateTime?
  passwordChangedAt DateTime?
  passwordResetToken String?
  passwordResetExpires DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  contacts         Contact[]
  repliedContacts  Contact[] @relation("ContactRepliedBy")

  @@map("users")
}

model Contact {
  id         String        @id @default(cuid())
  name       String        @db.VarChar(100)
  email      String        @db.VarChar(100)
  subject    String        @db.VarChar(200)
  message    String        @db.Text
  status     ContactStatus @default(NEW)
  priority   Priority      @default(MEDIUM)
  source     ContactSource @default(WEBSITE)
  isSpam     Boolean       @default(false)
  ipAddress  String?       @db.VarChar(45)
  userAgent  String?       @db.Text
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  // Relations
  user       User?         @relation(fields: [userId], references: [id])
  userId     String?
  repliedBy  User?         @relation("ContactRepliedBy", fields: [repliedById], references: [id])
  repliedById String?

  @@map("contacts")
}

model Portfolio {
  id               String    @id @default(cuid())
  title            String    @db.VarChar(100)
  description      String    @db.Text
  shortDescription String?   @db.VarChar(200)
  category        PortfolioCategory
  technologies    String[]   @db.VarChar(100)
  images          String[]   @db.VarChar(255)
  thumbnail       String     @db.VarChar(255)
  liveUrl         String?    @db.VarChar(500)
  githubUrl       String?    @db.VarChar(500)
  client          String?    @db.VarChar(100)
  startDate       DateTime?
  endDate         DateTime?
  isCompleted     Boolean    @default(true)
  isFeatured      Boolean    @default(false)
  isActive        Boolean    @default(true)
  order           Int        @default(0)
  challenges      String[]   @db.VarChar(500)
  solutions       String[]   @db.VarChar(500)
  results         String[]   @db.VarChar(500)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  // Relations
  testimonials    PortfolioTestimonial[]

  @@map("portfolios")
}

model PortfolioTestimonial {
  id          String    @id @default(cuid())
  clientName  String    @db.VarChar(100)
  clientRole  String    @db.VarChar(100)
  company     String    @db.VarChar(100)
  testimonial String    @db.Text
  rating      Int       @db.SmallInt
  portfolioId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@map("portfolio_testimonials")
}

model Service {
  id                String        @id @default(cuid())
  title             String        @db.VarChar(100)
  description       String        @db.Text
  shortDescription  String?       @db.VarChar(200)
  icon              String        @db.VarChar(50)
  category          ServiceCategory
  features          String[]      @db.VarChar(200)
  technologies      String[]      @db.VarChar(100)
  pricing           PricingModel  @default(CUSTOM)
  estimatedDuration String?       @db.VarChar(100)
  isActive          Boolean       @default(true)
  isFeatured        Boolean       @default(false)
  order             Int           @default(0)
  image             String?       @db.VarChar(255)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  testimonials      ServiceTestimonial[]

  @@map("services")
}

model ServiceTestimonial {
  id         String    @id @default(cuid())
  clientName String    @db.VarChar(100)
  clientRole String    @db.VarChar(100)
  company    String    @db.VarChar(100)
  testimonial String   @db.Text
  rating     Int       @db.SmallInt
  serviceId  String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relations
  service    Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@map("service_testimonials")
}

// Enums
enum UserRole {
  USER
  ADMIN
  SUPERADMIN
}

enum ContactStatus {
  NEW
  READ
  REPLIED
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ContactSource {
  WEBSITE
  EMAIL
  PHONE
  SOCIAL
}

enum PortfolioCategory {
  WEB_DEVELOPMENT
  MOBILE_APP
  UI_UX
  E_COMMERCE
  SAAS
  OTHER
}

enum ServiceCategory {
  DEVELOPMENT
  DESIGN
  CONSULTING
  MAINTENANCE
  OTHER
}

enum PricingModel {
  HOURLY
  FIXED
  MONTHLY
  CUSTOM
}
